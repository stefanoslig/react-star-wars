{"version":3,"sources":["assets/star-wars.png","search/SearchInput.tsx","common/ListItem.tsx","common/List.tsx","api/Api.ts","common/Header.tsx","characters/Characters.tsx","characters/utils.ts","common/Panel.tsx","search/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchInput","isLoading","query","onHandleInputChange","className","type","placeholder","value","onChange","ListItem","movie","title","director","release_date","to","url","split","List","data","length","map","episode_id","REACT_APP_API_URL","fetchWrapper","get","getAll","http","request","a","fetch","response","ok","json","then","results","catch","path","params","requestOptions","createUrl","httpAll","Promise","all","e","responses","paths","method","body","Request","toString","JSON","stringify","headers","URL","search","URLSearchParams","Header","Characters","filmId","useParams","useState","setMovie","characters","setCharacters","setIsLoading","useEffect","getMovie","getCharacters","characterUrls","character","name","birth_year","Panel","isOpen","children","backdropClicked","onClick","Search","movies","setMovies","setQuery","history","useHistory","useRouteMatch","src","logo","alt","target","push","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oaAAe,G,MAAA,IAA0B,uC,MCwB1BA,MAhBf,YAA8E,IAAvDC,EAAsD,EAAtDA,UAAWC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,oBACvC,OACE,sBAAKC,UAAU,cAAf,UACE,uBACEC,KAAK,SACLD,UAAU,oBACVE,YAAY,eACZC,MAAOL,EACPM,SAAUL,IAEZ,sBAAMC,UAAU,gBACfH,EAAY,qBAAKG,UAAU,kBAAyB,S,YCO5CK,MAlBf,YAA6C,IAAzBC,EAAwB,EAAxBA,MAClB,OACE,qBAAIN,UAAU,WAAd,UACE,sBAAMA,UAAU,qBAAhB,SAAsCM,EAAMC,QAC5C,uBAAMP,UAAU,qBAAhB,uBAAgDM,EAAME,YACtD,uBAAMR,UAAU,qBAAhB,2BACiBM,EAAMG,gBAEvB,cAAC,IAAD,CACET,UAAU,qBACVU,GAAE,kBAAaJ,EAAMK,IAAIC,MAAM,WAAW,GAAxC,UAFJ,4BCOSC,MAff,YAAoC,IAApBC,EAAmB,EAAnBA,KACd,OAAKA,EAAKC,OAIR,qBAAKf,UAAU,OAAf,SACE,6BACGc,EAAKE,KAAI,SAACV,GAAD,OACR,cAAC,EAAD,CAAiCA,MAAOA,GAAzBA,EAAMW,mBANpB,qBAAKjB,UAAU,kBAAf,4BCVLkB,EAAoB,wBAEbC,EAAe,CAC1BC,I,4CACAC,O,sDAGaC,E,8EAAf,WAAuBC,GAAvB,eAAAC,EAAA,sEACyBC,MAAMF,GAD/B,WACQG,EADR,QAEgBC,GAFhB,sBAGUD,EAHV,gCAKSA,EACJE,OACAC,MAAK,SAACH,GAAD,uBAAcA,EAASI,eAAvB,QAAkCJ,KACvCK,OAAM,iBAAO,OARlB,4C,kEAWA,WAAsBC,GAAtB,6BAAAR,EAAA,6DAAoCS,EAApC,+BAA6C,GACrCC,EAAiBX,EAAQ,MAAOY,EAAUH,EAAMC,IADxD,SAEeX,EAAQY,GAFvB,oF,+BAKeE,E,8EAAf,WAAuBb,GAAvB,eAAAC,EAAA,sEACwBa,QAAQC,IAAIf,EAAQP,KAAI,SAACuB,GAAD,OAAOd,MAAMc,OAD7D,cACMC,EADN,gBAEeH,QAAQC,IAAIE,EAAUxB,KAAI,SAACuB,GAAD,OAAOA,EAAEX,WAC7CC,MAAK,SAACH,GAAD,OAAcA,KACnBK,OAAM,iBAAO,MAJlB,oF,kEAOA,WAAyBU,GAAzB,6BAAAjB,EAAA,6DAA0CS,EAA1C,+BAAmD,GAC7CC,EAA4BO,EAAMzB,KAAI,SAACgB,GACzC,IAAMrB,EAAMwB,EAAUH,EAAMC,GAC5B,OAAOV,EAAQ,MAAOZ,MAH1B,SAKeyB,EAAQF,GALvB,oF,sBAQA,IAAMX,EAAU,SAAImB,EAAgB/B,EAAUgC,GAA9B,OACd,IAAIC,QAAQjC,EAAIkC,WAAY,CAC1BH,SACAC,KAAMA,EAAOG,KAAKC,UAAUJ,GAAQ,KACpCK,QAAS,CACP,eAAgB,sCAIhBb,EAAY,SAACH,GAAoC,IAAtBC,EAAqB,uDAAZ,GAClCtB,EAAM,IAAIsC,IAAJ,UAAW/B,EAAX,YAAgCc,IAE5C,OADArB,EAAIuC,OAAS,IAAIC,gBAAgBlB,GAAQY,WAClClC,G,YCpCMyC,MARf,YAAyC,IAAvB7C,EAAsB,EAAtBA,MAChB,OACE,wBAAQP,UAAU,SAAlB,SACE,6BAAKO,OC6CI8C,MA7Cf,WAAuB,IACfC,EAAWC,cAAXD,OADc,EAEME,mBAAuB,MAF7B,mBAEblD,EAFa,KAENmD,EAFM,OAGgBD,mBAAsB,IAHtC,mBAGbE,EAHa,KAGDC,EAHC,OAIcH,oBAAkB,GAJhC,mBAIb3D,EAJa,KAIF+D,EAJE,KAyBpB,OAnBAC,qBAAU,WACR,IAAMC,EAAQ,uCAAG,4BAAAtC,EAAA,sEACKL,EAAaC,IAAb,gBAAiCkC,EAAjC,MADL,OACThD,EADS,OAEfmD,EAASnD,GACTyD,EAAczD,EAAMoD,YAHL,2CAAH,qDAKRK,EAAa,uCAAG,WAAOC,GAAP,eAAAxC,EAAA,6DACpBoC,GAAa,GADO,SAEKzC,EAAaE,OAChB2C,EClBdhD,KAAI,SAACL,GAAD,OAASA,EAAIC,MAAM,QAAQ,ODenB,OAEd8C,EAFc,OAKpBE,GAAa,GACbD,EAAcD,GANM,2CAAH,sDASbJ,GACJQ,MAED,CAACR,IAEF,gCACE,cAAC,EAAD,CACE/C,MAAK,uBACHV,EAAY,aAAeS,EAAQA,EAAMC,MAAQ,MAGrD,6BACGmD,GACCA,EAAW1C,KAAI,SAACiD,GAAD,OACb,qBAAIjE,UAAU,WAAd,UACE,sBAAMA,UAAU,qBAAhB,SAAsCiE,EAAUC,OAChD,sBAAMlE,UAAU,qBAAhB,+BAAqDiE,EAAUE,gBAFnCF,EAAUtD,c,MElBrCyD,MAjBf,YAAmE,IAAlDC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,gBACjC,OACE,sBAAKvE,UAAS,0BAAqBqE,EAAS,SAAW,IAAvD,UACE,qBACErE,UAAU,cACVwE,QAAS,SAACjC,GACRgC,EAAgBhC,MAIpB,qBAAKvC,UAAW,QAAhB,SACE,qBAAKA,UAAW,gBAAhB,SAAkCsE,UCsC3BG,MA/Cf,WAAmB,IAAD,EACYjB,mBAAkB,IAD9B,mBACTkB,EADS,KACDC,EADC,OAEUnB,mBAAiB,IAF3B,mBAET1D,EAFS,KAEF8E,EAFE,OAGkBpB,oBAAkB,GAHpC,mBAGT3D,EAHS,KAGE+D,EAHF,KAIZiB,EAAUC,cACR9C,EAAS+C,cAAT/C,KAmBN,OAjBA6B,qBAAU,WAUF/D,EATM,uCAAG,4BAAA0B,EAAA,6DACboC,GAAa,GADA,SAEQzC,EAAaC,IAAa,SAAU,CACvD8B,OAAQpD,IAHG,OAEP4E,EAFO,OAKbd,GAAa,GACbe,EAAUD,GANG,2CAAH,oDAUVxB,GAEAyB,EAAU,MAEX,CAAC7E,IAGF,sBAAKE,UAAU,mBAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAMA,UAAU,eAAhB,qCACA,qBAAKgF,IAAKC,EAAMC,IAAI,SACpB,cAAC,EAAD,CACErF,UAAWA,EACXC,MAAOA,EACPC,oBAAqB,SAACwC,GAAD,OAAOqC,EAASrC,EAAE4C,OAAOhF,aAGlD,cAAC,EAAD,CAAMW,KAAM4D,IACZ,cAAC,IAAD,UACE,cAAC,IAAD,CAAO1C,KAAI,UAAKA,EAAL,mBAAX,SACE,cAAC,EAAD,CAAOqC,QAAQ,EAAME,gBAAiB,SAAChC,GAAD,OAAOsC,EAAQO,KAAKpD,IAA1D,SACE,cAAC,EAAD,cCrBGqD,MAlBf,WACE,OACE,sBAAKrF,UAAU,MAAf,UACE,cAAC,EAAD,CAAQO,MAAO,cACf,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+E,OAAK,EAACtD,KAAK,IAAlB,SACE,cAAC,IAAD,CAAUtB,GAAG,cAEf,cAAC,IAAD,CAAOsB,KAAK,UAAZ,SACE,cAAC,EAAD,eCPGuD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5D,MAAK,YAAkD,IAA/C6D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.96408e16.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/star-wars.1a7ed52a.png\";","import './SearchInput.scss';\n\ninterface SearchProps {\n  isLoading: boolean;\n  query: string;\n  onHandleInputChange: (query: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nfunction SearchInput({ isLoading, query, onHandleInputChange }: SearchProps) {\n  return (\n    <div className=\"SearchInput\">\n      <input\n        type=\"search\"\n        className=\"SearchInput-input\"\n        placeholder=\"Search query\"\n        value={query}\n        onChange={onHandleInputChange}\n      />\n      <span className=\"Search-icon\"></span>\n      {isLoading ? <div className=\"Search-loader\"></div> : null}\n    </div>\n  );\n}\n\nexport default SearchInput;\n","import { Movie } from '../models/Movie';\nimport './ListItem.scss';\nimport { Link } from 'react-router-dom';\n\ninterface ListItemProps {\n  movie: Movie;\n}\n\nfunction ListItem({ movie }: ListItemProps) {\n  return (\n    <li className=\"ListItem\">\n      <span className=\"ListItem-card-item\">{movie.title}</span>\n      <span className=\"ListItem-card-item\">Director: {movie.director}</span>\n      <span className=\"ListItem-card-item\">\n        Release Date: {movie.release_date}\n      </span>\n      <Link\n        className=\"ListItem-card-item\"\n        to={`/search/${movie.url.split('/films/')[1]}people`}\n      >\n        Characters\n      </Link>\n    </li>\n  );\n}\n\nexport default ListItem;\n","import { Movie } from '../models/Movie';\nimport './List.scss';\nimport ListItem from './ListItem';\n\ninterface ListProps {\n  data: Movie[];\n}\n\nfunction List({ data }: ListProps) {\n  if (!data.length) {\n    return <div className=\"List-no-results\">No results...</div>;\n  }\n  return (\n    <div className=\"List\">\n      <ul>\n        {data.map((movie) => (\n          <ListItem key={movie.episode_id} movie={movie} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default List;\n","const REACT_APP_API_URL = 'https://swapi.dev/api'; //this can be moved to the .env\n\nexport const fetchWrapper = {\n  get,\n  getAll,\n};\n\nasync function http<T>(request: Request): Promise<T> {\n  const response = await fetch(request);\n  if (!response.ok) {\n    throw response;\n  }\n  return response\n    .json()\n    .then((response) => response.results ?? response)\n    .catch(() => ({}));\n}\n\nasync function get<T>(path: string, params = {}): Promise<T> {\n  const requestOptions = request('GET', createUrl(path, params));\n  return await http<T>(requestOptions);\n}\n\nasync function httpAll(request: Request[]): Promise<any> {\n  let responses = await Promise.all(request.map((e) => fetch(e)));\n  return await Promise.all(responses.map((e) => e.json()))\n    .then((response) => response)\n    .catch(() => ({}));\n}\n\nasync function getAll<T>(paths: string[], params = {}): Promise<T> {\n  let requestOptions: Request[] = paths.map((path) => {\n    const url = createUrl(path, params);\n    return request('GET', url);\n  });\n  return await httpAll(requestOptions);\n}\n\nconst request = <D>(method: string, url: URL, body?: D): Request =>\n  new Request(url.toString(), {\n    method,\n    body: body ? JSON.stringify(body) : null,\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n\nconst createUrl = (path: string, params = {}): URL => {\n  const url = new URL(`${REACT_APP_API_URL}/${path}`);\n  url.search = new URLSearchParams(params).toString();\n  return url;\n};\n","import './Header.scss';\n\ninterface HeaderProps {\n  title: string;\n}\n\nfunction Header({ title }: HeaderProps) {\n  return (\n    <header className=\"Header\">\n      <h1>{title}</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import './Characters.scss';\nimport Header from '../common/Header';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { Movie } from '../models/Movie';\nimport { fetchWrapper } from '../api/Api';\nimport { Character } from '../models/Character';\nimport { splitCharactersUrls } from './utils';\n\nfunction Characters() {\n  let { filmId } = useParams<{ filmId: string }>();\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [characters, setCharacters] = useState<Character[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    const getMovie = async () => {\n      const movie = await fetchWrapper.get<Movie>(`films/${filmId}/`);\n      setMovie(movie);\n      getCharacters(movie.characters);\n    };\n    const getCharacters = async (characterUrls: string[]) => {\n      setIsLoading(true);\n      const characters = await fetchWrapper.getAll<Character[]>(\n        splitCharactersUrls(characterUrls)\n      );\n      setIsLoading(false);\n      setCharacters(characters);\n    };\n\n    if (!!filmId) {\n      getMovie();\n    }\n  }, [filmId]);\n  return (\n    <div>\n      <Header\n        title={`Characters - ${\n          isLoading ? 'Loading...' : movie ? movie.title : ''\n        }`}\n      />\n      <ul>\n        {characters &&\n          characters.map((character) => (\n            <li className=\"ListItem\" key={character.url}>\n              <span className=\"ListItem-card-item\">{character.name}</span>\n              <span className=\"ListItem-card-item\">{`Birth year: ${character.birth_year}`}</span>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Characters;\n","/**\n * From this url https://swapi.dev/api/people/n/\n * get the part after the `api/`\n * @param urls\n */\nexport const splitCharactersUrls = (urls: string[]): string[] => {\n  return urls.map((url) => url.split('api/')[1]);\n};\n","import * as React from 'react';\nimport './Panel.scss';\n\ninterface PanelProps {\n  isOpen: boolean;\n  children: React.ReactElement;\n  backdropClicked: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\nfunction Panel({ isOpen, children, backdropClicked }: PanelProps) {\n  return (\n    <div className={`Panel-container ${isOpen ? 'active' : ''}`}>\n      <div\n        className=\"Panel-glass\"\n        onClick={(e) => {\n          backdropClicked(e);\n        }}\n      />\n\n      <div className={'Panel'}>\n        <div className={'Panel-content'}>{children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Panel;\n","import './Search.scss';\nimport logo from '../assets/star-wars.png';\nimport SearchInput from './SearchInput';\nimport List from '../common/List';\nimport { Movie } from '../models/Movie';\nimport { useEffect, useState } from 'react';\nimport { fetchWrapper } from '../api/Api';\nimport { Route, Switch, useHistory, useRouteMatch } from 'react-router-dom';\nimport Characters from '../characters/Characters';\nimport Panel from '../common/Panel';\n\nfunction Search() {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState<string>('');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  let history = useHistory();\n  let { path } = useRouteMatch();\n\n  useEffect(() => {\n    const search = async () => {\n      setIsLoading(true);\n      const movies = await fetchWrapper.get<Movie[]>('films/', {\n        search: query,\n      });\n      setIsLoading(false);\n      setMovies(movies);\n    };\n\n    if (!!query) {\n      search();\n    } else {\n      setMovies([]);\n    }\n  }, [query]);\n\n  return (\n    <div className=\"Search-container\">\n      <div className=\"Search\">\n        <span className=\"Search-title\">Star Wars Movies Search</span>\n        <img src={logo} alt=\"Logo\" />\n        <SearchInput\n          isLoading={isLoading}\n          query={query}\n          onHandleInputChange={(e) => setQuery(e.target.value)}\n        />\n      </div>\n      <List data={movies} />\n      <Switch>\n        <Route path={`${path}/:filmId/people`}>\n          <Panel isOpen={true} backdropClicked={(e) => history.push(path)}>\n            <Characters />\n          </Panel>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from 'react';\nimport './App.scss';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport Search from './search/Search';\nimport Header from './common/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title={'Star Wars'} />\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/search\" />\n          </Route>\n          <Route path=\"/search\">\n            <Search />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}